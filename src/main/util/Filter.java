package main.util;

/**
 * <h1>Hjælpeklasse til at filtrere data.</h1> </br>
 * 
 * Implementerer et båndpasfilter i java.</br>
 * Specifikationer: båndpas 0.1-->40Hz </br>
 * 200. orden FIR filter med vinduesfunktion </br>
 * vinduestype: taylor</br>
 * 
 * @author Mads Østergaard
 *
 */
public class Filter {
	/**
	 * Koefficienterne til et båndpasfilter.
	 */
	private static double[] coeffs = { 0.000509, 0.000583, 0.000161, -0.000491, -0.000945, -0.000891, -0.000345,
			0.000345, 0.000721, 0.000511, -0.000178, -0.000908, -0.001187, -0.000800, 0.000031, 0.000767, 0.000895,
			0.000279, -0.000716, -0.001440, -0.001379, -0.000517, 0.000613, 0.001249, 0.000910, -0.000253, -0.001511,
			-0.002008, -0.001344, 0.000113, 0.001418, 0.001654, 0.000564, -0.001211, -0.002509, -0.002400, -0.000850,
			0.001181, 0.002327, 0.001721, -0.000364, -0.002613, -0.003496, -0.002300, 0.000307, 0.002635, 0.003053,
			0.001119, -0.002023, -0.004309, -0.004104, -0.001362, 0.002220, 0.004238, 0.003175, -0.000479, -0.004418,
			-0.005956, -0.003853, 0.000724, 0.004814, 0.005559, 0.002175, -0.003345, -0.007377, -0.007024, -0.002172,
			0.004206, 0.007838, 0.005976, -0.000577, -0.007718, -0.010569, -0.006765, 0.001688, 0.009380, 0.010902,
			0.004562, -0.006066, -0.014059, -0.013557, -0.003917, 0.009237, 0.017142, 0.013549, -0.000643, -0.017015,
			-0.024340, -0.015879, 0.005244, 0.026455, 0.032521, 0.015346, -0.018996, -0.050782, -0.055524, -0.017151,
			0.061548, 0.157354, 0.235601, 0.265723, 0.235601, 0.157354, 0.061548, -0.017151, -0.055524, -0.050782,
			-0.018996, 0.015346, 0.032521, 0.026455, 0.005244, -0.015879, -0.024340, -0.017015, -0.000643, 0.013549,
			0.017142, 0.009237, -0.003917, -0.013557, -0.014059, -0.006066, 0.004562, 0.010902, 0.009380, 0.001688,
			-0.006765, -0.010569, -0.007718, -0.000577, 0.005976, 0.007838, 0.004206, -0.002172, -0.007024, -0.007377,
			-0.003345, 0.002175, 0.005559, 0.004814, 0.000724, -0.003853, -0.005956, -0.004418, -0.000479, 0.003175,
			0.004238, 0.002220, -0.001362, -0.004104, -0.004309, -0.002023, 0.001119, 0.003053, 0.002635, 0.000307,
			-0.002300, -0.003496, -0.002613, -0.000364, 0.001721, 0.002327, 0.001181, -0.000850, -0.002400, -0.002509,
			-0.001211, 0.000564, 0.001654, 0.001418, 0.000113, -0.001344, -0.002008, -0.001511, -0.000253, 0.000910,
			0.001249, 0.000613, -0.000517, -0.001379, -0.001440, -0.000716, 0.000279, 0.000895, 0.000767, 0.000031,
			-0.000800, -0.001187, -0.000908, -0.000178, 0.000511, 0.000721, 0.000345, -0.000345, -0.000891, -0.000945,
			-0.000491, 0.000161, 0.000583, 0.000509 };
	private static int length = coeffs.length;

	private static int[] delayLine = new int[length];
	private static int count;

	/**
	 * 
	 * @param input
	 * @return
	 */
	public static double doFilter(int input) {
		// indsæt input på næste plads
		delayLine[count] = input;
		double result = 0.0;

		// gennemløb listerne og fold delayLine med coeffs: Sum(x(n-k)*h(n))
		int index = count;
		for (int i = 0; i < length; i++) {
			result += coeffs[i] * delayLine[index];
			// tæl index ned for at få den omvendte sekvens
			index--;

			// hvis index er < 0 skal vi fortsætte i max
			if (index < 0)
				index = length - 1;
		}
		// tæl count op, så næste måling kommer ind på næste plads
		count++;

		// hvis count er større end længden, sættes ind på plads 0.
		if (count >= length)
			count = 0;
		return result;
	}
}
